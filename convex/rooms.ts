import { mutation } from "./_generated/server";
import { v } from "convex/values";
import { query } from "./_generated/server";
import { Id } from "./_generated/dataModel";

export const createRoom = mutation({
    args: {
      name: v.string(),
      description: v.optional(v.string()),
      quiz: v.optional(v.object({
        title: v.string(),
        questions: v.array(v.object({
          question: v.string(),
          options: v.array(v.string()),
          answer: v.string()
        }))
      }))
    },
    handler: async (ctx, args) => {
      // Get the current user (assuming authentication is set up)
      const identity = await ctx.auth.getUserIdentity();
      if (!identity) throw new Error("Unauthorized");
   const newRoomID= crypto.randomUUID();
      // Create room
      const roomId = await ctx.db.insert("rooms", {
        name: args.name,
        roomId: newRoomID, // Generate a unique ID
        description: args.description,
        owner: identity.subject, // User ID of the creator
        participants: [identity.subject], // Creator is first participant
        status: "waiting", // Initial status
        createdAt: Date.now(),
        quiz: args.quiz || undefined
      });
  
      return newRoomID; // Return the roomId generated by crypto.randomUUID()
    }
  });


  export const getRoom = query({
    args: {
      roomId: v.string(),
    },
    handler: async (ctx, args) => {
      const room = await ctx.db.query("rooms").withIndex("byRoomId", q => q.eq("roomId", args.roomId)).unique();
      if (!room) {
        throw new Error("Room not found");
      }
      return room;
    },
  });

  export const joinRoom = mutation({
    args: {
      roomId: v.string()
    },
    handler: async (ctx, args) => {
      const identity = await ctx.auth.getUserIdentity();
      if (!identity) throw new Error("Unauthorized");
  
      // Find the room by roomId
      const room = await ctx.db.query("rooms")
        .withIndex("byRoomId", q => q.eq("roomId", args.roomId))
        .unique();
  
      if (!room) throw new Error("Room not found");
      if (room.participants.includes(identity.subject)) {
        throw new Error("Already in room");
      }
  
      // Update participants list
      await ctx.db.patch(room._id, {
        participants: [...room.participants, identity.subject],
        updatedAt: Date.now()
      });
  
      return room.roomId; // Return the room's Convex document ID
    }
  });